{"version":3,"sources":["app/App.module.css","app/App.tsx","index.tsx"],"names":["module","exports","App","textareaRef","useRef","colElm","selectedElm","React","useState","code","setCode","json","setJson","message","setMessage","handleJson","useCallback","obj","JSON","parse","error","undefined","formatJson","_","replacer","str","stringify","handleSelect","evn","handleColLn","target","result","SelectionText","current","innerHTML","end","start","useEffect","className","styles","app","fixed","zIndex","size","href","style","minWidth","width","position","backgroundColor","overflow","height","paddingBottom","boxSizing","value","language","placeholder","ref","onChange","padding","onMouseMove","onSelect","minHeight","fontSize","fontFamily","toolbar","onClick","flex","userSelect","margin","src","theme","displayDataTypes","ReactDOM","render","document","getElementById"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,qBAAqB,QAAU,uB,4KCuHnEC,EAjHH,WACV,IAAMC,EAAcC,iBAA4B,MAC1CC,EAASD,iBAAwB,MACjCE,EAAcF,iBAAwB,MAC5C,EAAwBG,IAAMC,SAAS,IAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBH,IAAMC,WAA9B,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA8BL,IAAMC,SAAS,IAA7C,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAaC,uBAAY,WAC7BF,EAAW,IACX,IACE,GAAIL,EAAM,CACR,IAAMQ,EAAMC,KAAKC,MAAMV,GACvBG,EAAQK,IAEV,MAAOG,GACPN,EAAWM,EAAMP,SACjBD,OAAQS,MAET,CAACZ,IAEEa,EAAaN,uBAAY,SAACO,GAA6B,IAA1BC,EAAyB,uDAAN,EACpDV,EAAW,IACX,IACE,GAAIL,EAAM,CACR,IAAMQ,EAAMC,KAAKC,MAAMV,GACjBgB,EAAMP,KAAKQ,UAAUT,EAAK,KAAMO,GACtCd,EAAQe,IAEV,MAAOL,GACPN,EAAWM,EAAMP,SACjBD,OAAQS,MAET,CAACZ,IAEEkB,EAAeX,uBAAY,SAACY,GAChCC,EAAYD,EAAIE,UACf,IAEGD,EAAc,SAACC,GACnB,GAAKA,EAAL,CAGA,IAAMC,EAAS,IAAIC,IAAcF,GACjCzB,EAAO4B,QAASC,UAAYH,EAAOI,IACnC7B,EAAY2B,QAASC,UAAYH,EAAOI,IAAMJ,EAAOK,QAAU,EAAI,GAAlC,oBAAoDL,EAAOI,IAAMJ,EAAOK,MAAxE,OAWnC,OARAC,qBAAU,WACRR,EAAY1B,EAAY8B,WACvB,IAEHI,qBAAU,WACRtB,MACC,CAACN,EAAMM,IAGR,sBAAKuB,UAAWC,IAAOC,IAAvB,UACE,cAAC,IAAD,CAAeC,OAAK,EAACC,OAAQ,IAAKC,KAAM,GAAIb,OAAO,UAAUc,KAAK,yCAClE,eAAC,IAAD,WACE,sBAAKC,MAAO,CAAEC,SAAU,IAAKC,MAAO,MAAOC,SAAU,WAAYC,gBAAiB,sBAAlF,UACE,qBAAKJ,MAAO,CAACK,SAAU,OAAOC,OAAQ,OAAQC,cAAe,GAAIC,UAAW,cAA5E,SACE,cAAC,IAAD,CACEC,MAAO7C,EACP8C,SAAS,OACTC,YAAY,0BACZC,IAAKtD,EACLuD,SAAU,SAAC9B,GAAD,OAASlB,EAAQkB,EAAIE,OAAOwB,QACtCK,QAAS,EACTC,YAAajC,EACbkC,SAAUlC,EACVkB,MAAO,CACLiB,UAAW,OACXC,SAAU,GACVd,gBAAiB,UACjBe,WAAY,oFAIlB,sBAAK1B,UAAWC,IAAO0B,QAAvB,UACE,gCACE,wBAAQC,QAAS5C,EAAjB,oBAGA,wBAAQ4C,QAAS,kBAAM5C,EAAW,KAAM,IAAxC,yBAIF,gCACE,sBAAMmC,IAAKpD,IAAU,sBAAMoD,IAAKnD,OAElC,8BACGO,GACC,qBAAKyB,UAAWC,IAAO1B,QAAvB,SAAiCA,YAKzC,sBAAKgC,MAAO,CAAEsB,KAAM,EAAGrB,SAAU,IAAKsB,WAAY,OAAQT,QAAS,GAAIT,SAAU,QAAjF,UACGrC,GACC,qBAAKgC,MAAO,CAAEc,QAAS,EAAGU,OAAQ,GAAlC,SACGxD,IAGJF,GAAuB,iBAARA,GACd,cAAC,IAAD,CAAY2D,IAAK3D,EAAO4D,MAAM,cAAc1B,MAAO,GAAM2B,kBAAkB,c,OC3GvFC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.9fefd02d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3fr4t\",\"message\":\"App_message__2V7LU\",\"toolbar\":\"App_toolbar__1c24n\"};","import React, { useCallback, useEffect, useRef} from 'react';\nimport Split from '@uiw/react-split';\nimport GitHubCorners from '@uiw/react-github-corners';\nimport CodeEditor, { SelectionText } from '@uiw/react-textarea-code-editor';\nimport JsonViewer from 'react-json-view';\nimport styles from './App.module.css';\n\nconst App = () => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const colElm = useRef<HTMLSpanElement>(null);\n  const selectedElm = useRef<HTMLSpanElement>(null);\n  const [code, setCode] = React.useState('');\n  const [json, setJson] = React.useState();\n  const [message, setMessage] = React.useState('');\n  \n  const handleJson = useCallback(() => {\n    setMessage('');\n    try {\n      if (code) {\n        const obj = JSON.parse(code);\n        setJson(obj);\n      }\n    } catch (error) {\n      setMessage(error.message);\n      setJson(undefined)\n    }\n  }, [code]);\n\n  const formatJson = useCallback((_, replacer: number = 2) => {\n    setMessage('');\n    try {\n      if (code) {\n        const obj = JSON.parse(code);\n        const str = JSON.stringify(obj, null, replacer);\n        setCode(str);\n      }\n    } catch (error) {\n      setMessage(error.message);\n      setJson(undefined)\n    }\n  }, [code]);\n\n  const handleSelect = useCallback((evn: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    handleColLn(evn.target as HTMLTextAreaElement);\n  }, []);\n\n  const handleColLn = (target: HTMLTextAreaElement | null) => {\n    if (!target) {\n      return\n    }\n    const result = new SelectionText(target as HTMLTextAreaElement);\n    colElm.current!.innerHTML = result.end as unknown as string;\n    selectedElm.current!.innerHTML = result.end - result.start === 0 ? '' : ` selected(${result.end - result.start})`;\n  }\n\n  useEffect(() => {\n    handleColLn(textareaRef.current)\n  }, []);\n\n  useEffect(() => {\n    handleJson()\n  }, [code, handleJson]);\n\n  return (\n    <div className={styles.app}>\n      <GitHubCorners fixed zIndex={999} size={60} target=\"__blank\" href=\"https://github.com/uiwjs/json-viewer\" />\n      <Split>\n        <div style={{ minWidth: 230, width: '45%', position: 'relative', backgroundColor: 'rgb(245, 245, 245)' }}>\n          <div style={{overflow: 'auto',height: '100%', paddingBottom: 25, boxSizing: 'border-box' }}>\n            <CodeEditor\n              value={code}\n              language=\"json\"\n              placeholder=\"Please enter JSON code.\"\n              ref={textareaRef}\n              onChange={(evn) => setCode(evn.target.value)}\n              padding={5}\n              onMouseMove={handleSelect}\n              onSelect={handleSelect}\n              style={{\n                minHeight: '100%',\n                fontSize: 12,\n                backgroundColor: \"#f5f5f5\",\n                fontFamily: 'ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace',\n              }}\n            />\n          </div>\n          <div className={styles.toolbar}>\n            <div>\n              <button onClick={formatJson}>\n                Format\n              </button>\n              <button onClick={() => formatJson(null, 0)}>\n                Compress\n              </button>\n            </div>\n            <div>\n              <span ref={colElm} /><span ref={selectedElm} />\n            </div>\n            <div>\n              {message && (\n                <div className={styles.message}>{message}</div>\n              )}\n            </div>\n          </div>\n        </div>\n        <div style={{ flex: 1, minWidth: 230, userSelect: 'none', padding: 10, overflow: 'auto' }}>\n          {message && (\n            <pre style={{ padding: 0, margin: 0 }}>\n              {message}\n            </pre>\n          )}\n          {json && typeof json == 'object' && (\n            <JsonViewer src={json!} theme=\"rjv-default\" style={{  }} displayDataTypes={false} />\n          )}\n        </div>\n      </Split>\n    </div>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}